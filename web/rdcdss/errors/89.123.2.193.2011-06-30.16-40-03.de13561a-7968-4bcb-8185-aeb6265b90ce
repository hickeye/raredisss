(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/www-data/web2py/applications/rdcdss/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*- \n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nimport os\nimport time\nimport hashlib\nimport cPickle\n\ndef index():\n    """\n    Test powerTable\n    """\n    RUNQUERYPATH = "../master/code/runQuery/"\n    session.data = {"document":[]}\n    session.query = ""\n    logfile = open(\'logs/\'+str(response.session_id),\'a\')\n    logfile.write("SESSION: "+str(response.session_id)+"\\n")\n    logfile.write("TIME: "+time.strftime("%X %x %z")+"\\n")\n    db.t_result.truncate()\n    db.t_resdis.truncate()\n    query = ""\n    collection = ""\n    diseases = ""\n    reranking = ""\n    timer = ""\n    table = ""\n    distable = ""\n    if request.vars.q:\n        t0 = time.clock()\n        query = request.vars.q\n        checked = request.vars.c\n        os.system(\'pwd\')\n        if checked == "on":\n            hashstring = hashlib.md5(request.vars.q+"index_raregenet"+str(time.time())).hexdigest()\n            collection = "CHECKED"\n            os.system(\'sh \'+RUNQUERYPATH+\'runQueryDiseases.sh "\'+request.vars.q+\'" index_raregenet \'+hashstring)\n            diseases = "CHECKED"\n        else:\n            hashstring = hashlib.md5(request.vars.q+"index_rare"+str(time.time())).hexdigest()\n            collection = ""\n            os.system(\'sh \'+RUNQUERYPATH+\'runQueryDiseases.sh "\'+request.vars.q+\'" index_rare \'+hashstring)\n            diseases = "CHECKED"\n        \n        db.t_result.truncate()\n        db.t_result.import_from_csv_file(open(os.getcwd()+\'/results/\'+hashstring,\'r\'))\n        rows = []\n        for i,row in db().select(db.t_result.ALL):\n            session.data["id_"+i]={"title":row.f_title,"url":row.f_url,"snippet":row.f_snippet}\n            rows.append(row)\n        session.hashstring = hashstring\n        session.query = query\n        db.t_resdis.truncate()\n        db.t_resdis.import_from_csv_file(open(os.getcwd()+\'/results/\'+hashstring+\'.dis\',\'r\'))\n        timer = time.clock() - t0\n        logfile.write("QUERY: "+query+"\\n")\n        logfile.write("GENETIC CHECKED: "+str(checked)+"\\n")\n        logfile.write("RESULT FILE: "+hashstring+"\\n")\n        logfile.write("SECONDS: "+str(timer)+"\\n")\n        logfile.close()\n        #table = createResultTable(db.t_result)\n        distable = createDiseaseTable(db.t_resdis)\n        #distable = SQLTABLE(db().select(db.t_resdis.f_rank,db.t_resdis.f_disease,db.t_resdis.f_freq,db.t_resdis.f_docnos),headers=\'labels\',truncate=80)\n        timer = str(timer)[:5] + " seconds"\n        print timer\n        \n        response.d_rows = session.data\n        response.d_query = query\n        response.d_timer = timer\n        response.d_raregenet = checked\n        response.d_session_id = response.session_id\n\n    return locals()\n    \ndef createResultTable(data):\n    class Virtual(object):\n        @virtualsettings(label=T(\'Source\'))\n        def sourcelink(self):\n            return A(self.t_result.f_source,_href=self.t_result.f_url,_target=\'_blank\')\n    \n    table = plugins.powerTable\n    table.datasource = data\n            \n    table.dtfeatures[\'sScrollY\'] = \'100%\'\n    table.virtualfields = Virtual()\n    table.dtfeatures[\'bSort\'] = False\n    table.dtfeatures[\'aaSortingFixed\'] = [[2,\'asc\']]\n    table.dtfeatures[\'iDisplayLength\'] = 20\n    table.dtfeatures[\'bPaginate\'] =  False\n    \n    table.truncate = 60 \n    table.headers = \'labels\'\n    table.keycolumn = \'t_result.id\'\n    table.showkeycolumn = False\n    table.extra = dict(\n                       details={\'detailscolumns\':\'t_result.f_title,t_result.f_url,t_result.f_snippet\',\'detailscallback\':URL(\'display_details.load\')}\n                       )\n    table.columns = [\'t_result.f_rank\',\n                     \'t_result.f_title\',\n                     \'virtual.sourcelink\',\n                     #\'t_result.f_source\',\n                     #\'t_result.f_docno\',\n                     #\'t_result.f_score\',\n                    ]\n    table.hiddencolumns = [\'t_result.f_source\',\'t_result.f_url\']\n    table.dtfeatures[\'bInfo\'] =  False\n    table.dtfeatures[\'bFilter\'] =  False\n    table.dtfeatures[\'bAutoWidth\'] =  False\n    table.dtfeatures[\'aoColumns\'] = [\n            { \'sWidth\': \'0%\' },\n            { \'sWidth\': \'5.5%\' },\n            { \'sWidth\': \'5.5%\' },\n            { \'sWidth\': \'55.5%\' },\n            { \'sWidth\': \'33.5%\' }\n        ]\n    return table.create()\n\ndef createDiseaseTable(data):\n    distable = plugins.powerTable\n    distable.datasource = data\n    \n    distable.dtfeatures[\'sScrollY\'] = \'100%\'\n    distable.dtfeatures[\'bSort\'] = False\n    distable.dtfeatures[\'aaSortingFixed\'] = [[2,\'asc\']]\n    distable.dtfeatures[\'iDisplayLength\'] = 20\n    distable.dtfeatures[\'bPaginate\'] =  False\n    distable.dtfeatures[\'bInfo\'] =  False\n    distable.dtfeatures[\'bFilter\'] =  False\n    \n    distable.truncate = 60 \n    distable.headers = \'labels\'\n    distable.keycolumn = \'t_resdis.id\'\n    distable.showkeycolumn = False\n    \n    distable.columns = [\'t_resdis.f_rank\',\n                     \'t_resdis.f_disease\',\n                     \'t_resdis.f_freq\',\n                     \'t_resdis.f_docnos\',\n                     ]\n                     \n    return distable.create()\n\ndef filterOnString(fs):\n        fs = fs.lower()\n        query = (db.t_result.f_title.lower().contains(fs) | db.t_result.f_snippet.lower().contains(fs) | db.t_result.f_source.lower().contains(fs) ) \n        return db(query).select()\n \ndef display_details():\n    """\n    return a custom object to be inserted in detail for table\n    """\n    key = None\n    cols = None\n    for k in request.vars.keys():\n        if k[:3] == \'dt_\':\n            key = request.vars[k]\n        elif k[:6] == \'dtcols\':\n            cols = request.vars[k]\n\n    value = int(key.split(\'.\')[2])\n    rows = cPickle.load(response.session_file)[\'data\']\n    row = rows[value-1]\n\n    logfile = open(\'logs/\'+str(response.session_id),\'a\')\n    logfile.write("OPENED DETAILS FOR RANK: "+str(value)+"\\n")\n    logfile.close()\n    \n    details = DIV(B("Title: "))\n    details.append(P(str(row[0])))\n    details.append(B("URL: "))\n    details.append(P(A(str(row[1]),_href=str(row[1]),_target=\'_blank\')))\n    details.append(B("Text: "))\n    details.append(P(str(row[2])))\n    return details\n\ndef feedback():\n    if request.vars.comment:\n        feedbackfile = open("logs/messages","a")\n        feedbackfile.write("SESSION: "+str(response.session_id)+"\\n")\n        feedbackfile.write("TIME: "+time.strftime("%X %x %z")+"\\n")\n        if session.query:\n            feedbackfile.write("QUERY: "+str(session.query)+"\\n")\n        if session.hashstring:\n            feedbackfile.write("RESULT FILE: "+str(session.hashstring)+"\\n")\n        else:\n            feedbackfile.write("RESULT FILE: "+"no recent queries"+"\\n")\n        if response.session_id:\n            feedbackfile.write("LOG FILE: "+str(response.session_id)+"\\n")\n        feedbackfile.write("COMMENT: \'"+str(request.vars.comment)+"\'\\n")\n        feedbackfile.close()\n        message="Feedback received. Thank you!"\n        return message\n    return ""\n\ndef filterResults():\n    fword = str(request.vars.values()[0])\n    data = filterOnString(fword)\n    table = createResultTable(data)\n    return str(table) + "<script>addFilterBox(\'"+str(fword)+"\');$(\'input#fword\').focus().val($(\'input#fword\').val());</script>"\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login \n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    session.forget()\n    return service()\n\nresponse._vars=response._caller(index)\n'
p6
sS'snapshot'
p7
(dp8
sS'traceback'
p9
S'Traceback (most recent call last):\n  File "/home/www-data/web2py/gluon/restricted.py", line 181, in restricted\n    exec ccode in environment\n  File "/home/www-data/web2py/applications/rdcdss/controllers/default.py", line 242, in <module>\n  File "/home/www-data/web2py/gluon/globals.py", line 133, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/www-data/web2py/applications/rdcdss/controllers/default.py", line 54, in index\n    for i,row in db().select(db.t_result.ALL):\nValueError: too many values to unpack\n'
p10
s.